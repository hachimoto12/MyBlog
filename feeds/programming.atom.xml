<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>鉢本 一二のブログ - プログラミング</title><link href="https://hachi12.com/" rel="alternate"></link><link href="https://hachi12.com/feeds/programming.atom.xml" rel="self"></link><id>https://hachi12.com/</id><updated>2019-09-20T00:00:00+09:00</updated><entry><title>Visual StudioでqDebugのログを表示させる方法</title><link href="https://hachi12.com/qDebug_in_VS.html" rel="alternate"></link><published>2019-09-20T00:00:00+09:00</published><updated>2019-09-20T00:00:00+09:00</updated><author><name>鉢本 一二</name></author><id>tag:hachi12.com,2019-09-20:/qDebug_in_VS.html</id><content type="html">&lt;h2&gt;問題&lt;/h2&gt;
&lt;p&gt;Visual Studioを使ってQt5 GUIアプリケーションを作成しているときに、qDebugでログを表示させたかった。
しかし実行時、Visual Studioの出力ウィンドウでログがでず、ほかに出力ウィンドウに出力されていなかった。&lt;/p&gt;
&lt;h2&gt;対策&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/11184590/how-to-view-qdebug-in-visual-studio/21277910" target="_blank"&gt;ここ&lt;/a&gt;で解決策が見つかった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プロジェクトのプロパティ -&amp;gt; リンカ -&amp;gt; システム -&amp;gt; サブシステムでコンソールを選択。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実行するとコンソールが出てqDebugのログも出力されていた。&lt;/p&gt;</content><category term="プログラミング"></category><category term="Qt5"></category><category term="VisualStudio"></category></entry><entry><title>Visual Studio 2017 + FBX SDKでビルドしようとしたらエラーになったときの対処</title><link href="https://hachi12.com/fbx_build_error.html" rel="alternate"></link><published>2019-08-16T00:00:00+09:00</published><updated>2019-08-16T00:00:00+09:00</updated><author><name>鉢本 一二</name></author><id>tag:hachi12.com,2019-08-16:/fbx_build_error.html</id><summary type="html">&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio 2017&lt;/li&gt;
&lt;li&gt;FBX SDK 2019.5&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;問題&lt;/h2&gt;
&lt;p&gt;FBX SDKを使ってみようと思い、Visual Studio 2017でソースコードをビルド。
その時の設定として、以下の設定を行った。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プロパティ -&amp;gt; C/C++ -&amp;gt; 言語 -&amp;gt; 準拠モードを「いいえ」に設定&lt;/li&gt;
&lt;li&gt;プロパティ -&amp;gt; C/C++ -&amp;gt; 全般 -&amp;gt; 追加のインクルードディレクトリでFBX SDKのインクルードパスを追加&lt;/li&gt;
&lt;li&gt;プロパティ -&amp;gt; リンカ -&amp;gt; 全般 -&amp;gt; 追加のライブラリディレクトリでdebug, releaseそれぞれに合わせてライブラリパスを追加&lt;/li&gt;
&lt;li&gt;プロパティ -&amp;gt; リンカ -&amp;gt; 入力でfbxsdk-md.libを追加
プロパティ -&amp;gt; C/C++ -&amp;gt; コード生成 -&amp;gt; ランタイム　ライブラリで&lt;ul&gt;
&lt;li&gt;debug   : マルチスレッド デバック DLL&lt;/li&gt;
&lt;li&gt;release : マルチスレッド …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio 2017&lt;/li&gt;
&lt;li&gt;FBX SDK 2019.5&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;問題&lt;/h2&gt;
&lt;p&gt;FBX SDKを使ってみようと思い、Visual Studio 2017でソースコードをビルド。
その時の設定として、以下の設定を行った。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プロパティ -&amp;gt; C/C++ -&amp;gt; 言語 -&amp;gt; 準拠モードを「いいえ」に設定&lt;/li&gt;
&lt;li&gt;プロパティ -&amp;gt; C/C++ -&amp;gt; 全般 -&amp;gt; 追加のインクルードディレクトリでFBX SDKのインクルードパスを追加&lt;/li&gt;
&lt;li&gt;プロパティ -&amp;gt; リンカ -&amp;gt; 全般 -&amp;gt; 追加のライブラリディレクトリでdebug, releaseそれぞれに合わせてライブラリパスを追加&lt;/li&gt;
&lt;li&gt;プロパティ -&amp;gt; リンカ -&amp;gt; 入力でfbxsdk-md.libを追加
プロパティ -&amp;gt; C/C++ -&amp;gt; コード生成 -&amp;gt; ランタイム　ライブラリで&lt;ul&gt;
&lt;li&gt;debug   : マルチスレッド デバック DLL&lt;/li&gt;
&lt;li&gt;release : マルチスレッド DLL
となっていたので mdがついているライブラリを追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ビルドを行うと以下のようなエラーが出た。
&lt;img alt="ビルドエラー" src="images/2019_08_16_01.png" title="ビルドエラー"&gt;&lt;/p&gt;
&lt;h2&gt;原因&lt;/h2&gt;
&lt;p&gt;ライブラリが足りていなかったのが原因。&lt;/p&gt;
&lt;h2&gt;対策&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;その1. 主に、fbxsdk-md.libと一緒にある以下2つのライブラリを追加することで解決できた。&lt;ul&gt;
&lt;li&gt;libxml2-md.lib&lt;/li&gt;
&lt;li&gt;zlib-md.lib&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その2. fbxsdk.libをリンクしてビルドする。
  ただしfbxsdk.libをリンクした場合、実行時にexeファイルと同じところにfbxsdk.dllを置かない動かないと実行されない。
  *-md.libをリンクして実行した場合は、dllなしでもexeファイルを実行できた。&lt;/li&gt;
&lt;/ul&gt;</content><category term="プログラミング"></category><category term="c++"></category></entry><entry><title>AMD APP SDKが無いので、代わりにOpenCL Install Client Driver(ICD) LoaderでOpenCLを使ってみる</title><link href="https://hachi12.com/opencl_with_icd.html" rel="alternate"></link><published>2019-07-07T00:00:00+09:00</published><updated>2019-07-07T00:00:00+09:00</updated><author><name>鉢本 一二</name></author><id>tag:hachi12.com,2019-07-07:/opencl_with_icd.html</id><content type="html">&lt;p&gt;&lt;a href="https://developer.amd.com/amd-accelerated-parallel-processing-app-sdk/"&gt;AMD APP SDK&lt;/a&gt;が404のため。&lt;/p&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows 10&lt;/li&gt;
&lt;li&gt;Radeon RX 560.&lt;/li&gt;
&lt;li&gt;Visual Studio 2017 Communityインストール済み。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;やり方&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;AMDのドライバーを最新にしておく。&lt;/li&gt;
&lt;li&gt;c:/windowsにあるOpenCL.dllが新しいことを確認。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/KhronosGroup/OpenCL-ICD-Loader"&gt;OpenCL-ICD-Loader&lt;/a&gt;からプロジェクトをダウンロード。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/KhronosGroup/OpenCL-Headers"&gt;OpenCL Header&lt;/a&gt;からヘッダーの最新版をダウンロード&lt;/li&gt;
&lt;li&gt;3と4.を解凍。&lt;/li&gt;
&lt;li&gt;OpenCL HeaderのCLフォルダをOpenCL-ICD-Loaderのincフォルダへコピー。&lt;/li&gt;
&lt;li&gt;OpenCL-ICD-Loaderのスクリプトを実行。&lt;/li&gt;
&lt;li&gt;OpenCLのプログラムを書く。&lt;/li&gt;
&lt;li&gt;ビルドの設定で、ライブラリをOpenCL-ICD-Loaderのbuild/OpenCL.libを指定する。&lt;/li&gt;
&lt;li&gt;ビルド&lt;/li&gt;
&lt;/ol&gt;</content><category term="プログラミング"></category><category term="OpenCL"></category><category term="c++"></category></entry></feed>