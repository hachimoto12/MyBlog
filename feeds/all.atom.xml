<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>鉢本 一二のブログ</title><link href="https://hachimoto12.com/" rel="alternate"></link><link href="https://hachimoto12.com/feeds/all.atom.xml" rel="self"></link><id>https://hachimoto12.com/</id><updated>2020-10-02T00:00:00+09:00</updated><entry><title>OpenGLのマウス操作の実装メモ</title><link href="https://hachimoto12.com/OpenGL_Camera.html" rel="alternate"></link><published>2020-10-02T00:00:00+09:00</published><updated>2020-10-02T00:00:00+09:00</updated><author><name>鉢本 一二</name></author><id>tag:hachimoto12.com,2020-10-02:/OpenGL_Camera.html</id><summary type="html">&lt;p&gt;3D画面をマウス操作したときのカメラの動きの実装をメモ。 &lt;br&gt;
自分的にはいい感じに動いているが、もしかしたら間違いがあるかもしれない。  &lt;/p&gt;
&lt;p&gt;カメラは以下のようにした場合の実装のメモとなっている。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Camera&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;ZoomType&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;IN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;OUT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vec3&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vec3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 位置&lt;/span&gt;
    &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vec3&lt;/span&gt; &lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vec3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// 注視点&lt;/span&gt;
    &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vec3&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vec3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 上方向&lt;/span&gt;
    &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;uvec2&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// ウィンドウサイズ&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ZoomType&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;noexcept&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;dvec2&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;mouse_pos0 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;3D画面をマウス操作したときのカメラの動きの実装をメモ。 &lt;br&gt;
自分的にはいい感じに動いているが、もしかしたら間違いがあるかもしれない。  &lt;/p&gt;
&lt;p&gt;カメラは以下のようにした場合の実装のメモとなっている。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Camera&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;ZoomType&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;IN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;OUT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vec3&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vec3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 位置&lt;/span&gt;
    &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vec3&lt;/span&gt; &lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vec3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// 注視点&lt;/span&gt;
    &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vec3&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vec3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 上方向&lt;/span&gt;
    &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;uvec2&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// ウィンドウサイズ&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ZoomType&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;noexcept&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;dvec2&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;mouse_pos0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;dvec2&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;mouse_pos1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;noexcept&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;revolution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;dvec2&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;old_cursor_pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;dvec2&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;new_cursor_pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;noexcept&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;    
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;ズーム&lt;/h2&gt;
&lt;p&gt;ズームは、カメラの注視点(center) に向かってに カメラの位置(pos) を移動させるようにした。&lt;/p&gt;
&lt;h3&gt;ズームイン&lt;/h3&gt;
&lt;p&gt;ズームインは、カメラの位置(pos) が カメラの注視点(center) へ近づく&lt;/p&gt;
&lt;p&gt;&lt;img alt="ズームイン" src="images/2020_10_02_01.png" title="ズームイン"&gt;  &lt;/p&gt;
&lt;h3&gt;ズームアウト&lt;/h3&gt;
&lt;p&gt;ズームアウトは、カメラの位置(pos) が カメラの注視点(center) から離れる&lt;/p&gt;
&lt;p&gt;&lt;img alt="ズームアウト" src="images/2020_10_02_02.png" title="ズームアウト"&gt;  &lt;/p&gt;
&lt;h3&gt;実装&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;Camera&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ZoomType&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;noexcept&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ZoomType&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;IN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// ズームインだと近づくのでマイナスにする&lt;/span&gt;

    &lt;span class="c1"&gt;// 移動方向を求める&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// 新しい位置を求める&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;mouse_pos1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// カメラがズームインできる最小値を設定. 0.3fは適当に設定&lt;/span&gt;
    &lt;span class="c1"&gt;// ズームアウトは今回とくに制限を設けない&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;min_near&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;znear&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.3f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mouse_pos1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;min_near&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mouse_pos1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;移動&lt;/h2&gt;
&lt;p&gt;カメラの移動は、カメラの位置(pos)と注視点(center)が共に移動するように実装する。  &lt;/p&gt;
&lt;h3&gt;実装&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;Camera&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;dvec2&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;mouse_pos0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;dvec2&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;mouse_pos1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;noexcept&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;viewMatrix&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;proj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;projectionMatrix&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;viewport&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vec4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// マウス座標をワールド座標に変換&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vec3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mouse_pos0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mouse_pos0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mouse_pos0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mouse_pos0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;proj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;viewport&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vec3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mouse_pos1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mouse_pos1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mouse_pos1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mouse_pos1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;proj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;viewport&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// マウス移動した分をカメラの位置と注視点に追加&lt;/span&gt;
    &lt;span class="k"&gt;constexpr&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;SPEED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;30.0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;SPEED&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;回転&lt;/h2&gt;
&lt;p&gt;カメラの回転は、注視点(center)を中心とした球体に沿ってカメラが移動するようにする。&lt;br&gt;
この時、カメラの位置(pos)と上方向(up)が変化する。&lt;br&gt;
&lt;code&gt;球面座標&lt;/code&gt; で求められるらしい。&lt;br&gt;
よくわかっていない。参考にしたサイトがあったがメモするのを忘れてしまった。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="回転" src="images/2020_10_02_03.png" title="回転"&gt;  &lt;/p&gt;
&lt;p&gt;とりあえず、ソースコードを乗っける。&lt;/p&gt;
&lt;h3&gt;実装&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;Camera&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;revolution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;dvec2&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;mouse_pos0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;dvec2&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;mouse_pos1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;noexcept&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;constexpr&lt;/span&gt; &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;SPEED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;10.0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cross&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;theta_u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mouse_pos0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mouse_pos1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;SPEED&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;angleAxis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;radians&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;theta_u&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;tmp_pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;conjugate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;theta_w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mouse_pos1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mouse_pos0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;SPEED&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;angleAxis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;radians&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;theta_w&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glm&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;conjugate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;tmp_pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;tmp_pos&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp_pos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="プログラミング"></category><category term="OpenGL"></category></entry><entry><title>Unrealで雨が降った後に波紋を出す</title><link href="https://hachimoto12.com/unreal_particle_rain_repple.html" rel="alternate"></link><published>2020-01-25T00:00:00+09:00</published><updated>2020-01-25T00:00:00+09:00</updated><author><name>鉢本 一二</name></author><id>tag:hachimoto12.com,2020-01-25:/unreal_particle_rain_repple.html</id><summary type="html">&lt;p&gt;ゲームエンジンを使って雨を降らせるというのを行いたいと思い、google先生で調べたところ &lt;a href="http://nn-hokuson.hatenablog.com/entry/2019/07/05/090946"&gt;おもちゃラボさんの【Unity】広重のような雨のエフェクトを作る&lt;/a&gt;が見つかり、雨の感じが自分好みだった。&lt;/p&gt;
&lt;p&gt;このような雨の降らせ方をUnrealでもできないかと、素人ながらに試行錯誤し、それらしく作れたのでその時の手順をメモした。&lt;/p&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Unreal Engin: v4.23.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;手順&lt;/h2&gt;
&lt;h3&gt;プロジェクトの作成&lt;/h3&gt;
&lt;p&gt;とりあえず、プロジェクトを作成。&lt;br&gt;
プロジェクト名は、&lt;code&gt;Rain_Project&lt;/code&gt;とする。&lt;/p&gt;
&lt;h3&gt;床の設定&lt;/h3&gt;
&lt;p&gt;デフォルトの床のマテリアルを変更する。&lt;br&gt;
&lt;code&gt;Floor&lt;/code&gt;を選択し、マテリアルは&lt;code&gt;M_Floor_01&lt;/code&gt;にする。&lt;br&gt;
&lt;img alt="床のマテリアルを設定" src="images/2020_01_25_32.png" title="床のマテリアルを設定"&gt;  &lt;/p&gt;
&lt;h3&gt;雨マテリアルを作成&lt;/h3&gt;
&lt;p&gt;テクスチャはこのような感じを作成。&lt;br&gt;
名前は、とりあえず&lt;code&gt;T_Rain&lt;/code&gt;という名前を付けて、Unrealにインポート。&lt;br&gt;
&lt;img alt="雨のテクスチャ" src="images/2020_01_25_01.png" title="雨のテクスチャ"&gt;  &lt;/p&gt;
&lt;p&gt;次に雨のマテリアルを作成する。&lt;br&gt;
マテリアルの名前は、&lt;code&gt;M_Rain&lt;/code&gt;とした。&lt;br&gt;
&lt;code&gt;M_Rain&lt;/code&gt;を開くと、メインマテリアルが１つある状態となっている。
&lt;img alt="雨のマテリアル" src="images/2020_01_25_02.png" title="雨のマテリアル"&gt;  &lt;/p&gt;
&lt;p&gt;メインマテリアルの設定を変更する。&lt;/p&gt;
&lt;p&gt;詳細タブにある&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Material -&amp;gt; Blend Mode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の …&lt;/p&gt;</summary><content type="html">&lt;p&gt;ゲームエンジンを使って雨を降らせるというのを行いたいと思い、google先生で調べたところ &lt;a href="http://nn-hokuson.hatenablog.com/entry/2019/07/05/090946"&gt;おもちゃラボさんの【Unity】広重のような雨のエフェクトを作る&lt;/a&gt;が見つかり、雨の感じが自分好みだった。&lt;/p&gt;
&lt;p&gt;このような雨の降らせ方をUnrealでもできないかと、素人ながらに試行錯誤し、それらしく作れたのでその時の手順をメモした。&lt;/p&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Unreal Engin: v4.23.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;手順&lt;/h2&gt;
&lt;h3&gt;プロジェクトの作成&lt;/h3&gt;
&lt;p&gt;とりあえず、プロジェクトを作成。&lt;br&gt;
プロジェクト名は、&lt;code&gt;Rain_Project&lt;/code&gt;とする。&lt;/p&gt;
&lt;h3&gt;床の設定&lt;/h3&gt;
&lt;p&gt;デフォルトの床のマテリアルを変更する。&lt;br&gt;
&lt;code&gt;Floor&lt;/code&gt;を選択し、マテリアルは&lt;code&gt;M_Floor_01&lt;/code&gt;にする。&lt;br&gt;
&lt;img alt="床のマテリアルを設定" src="images/2020_01_25_32.png" title="床のマテリアルを設定"&gt;  &lt;/p&gt;
&lt;h3&gt;雨マテリアルを作成&lt;/h3&gt;
&lt;p&gt;テクスチャはこのような感じを作成。&lt;br&gt;
名前は、とりあえず&lt;code&gt;T_Rain&lt;/code&gt;という名前を付けて、Unrealにインポート。&lt;br&gt;
&lt;img alt="雨のテクスチャ" src="images/2020_01_25_01.png" title="雨のテクスチャ"&gt;  &lt;/p&gt;
&lt;p&gt;次に雨のマテリアルを作成する。&lt;br&gt;
マテリアルの名前は、&lt;code&gt;M_Rain&lt;/code&gt;とした。&lt;br&gt;
&lt;code&gt;M_Rain&lt;/code&gt;を開くと、メインマテリアルが１つある状態となっている。
&lt;img alt="雨のマテリアル" src="images/2020_01_25_02.png" title="雨のマテリアル"&gt;  &lt;/p&gt;
&lt;p&gt;メインマテリアルの設定を変更する。&lt;/p&gt;
&lt;p&gt;詳細タブにある&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Material -&amp;gt; Blend Mode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の&lt;code&gt;Opacue&lt;/code&gt;を&lt;code&gt;Translucent&lt;/code&gt;に変更。&lt;br&gt;
&lt;img alt="Translucentに変更" src="images/2020_01_25_03.png" title="Translucentに変更"&gt;  &lt;/p&gt;
&lt;p&gt;メインマテリアルの詳細に関する設定はこれで終了。&lt;br&gt;
次に、&lt;code&gt;T_Rain&lt;/code&gt;をマテリアルに適用するため&lt;code&gt;Texture Sample&lt;/code&gt;ノードを追加。
&lt;img alt="Texture Sampleノードを追加" src="images/2020_01_25_04.png" title="Texture Sampleノードを追加"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Texture Sample&lt;/code&gt;ノードに&lt;code&gt;T_Rain&lt;/code&gt;を適用する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Texutre Sample&lt;/code&gt;ノードの詳細タブにある&lt;code&gt;Material Expression Texture Base&lt;/code&gt;の&lt;code&gt;Texture&lt;/code&gt;の項目で&lt;code&gt;T_Rain&lt;/code&gt;を設定する。&lt;br&gt;
&lt;img alt="T_Rainを設定" src="images/2020_01_25_05.png" title="T_Rainを設定"&gt;  &lt;/p&gt;
&lt;p&gt;これで&lt;code&gt;Texture Sample&lt;/code&gt;ノードの詳細に関する設定は終了。&lt;br&gt;
次にノードを繋げていく。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Texture Sample&lt;/code&gt;ノードの&lt;code&gt;RGB&lt;/code&gt; -&amp;gt; メインマテリアルの&lt;code&gt;エミッシブルカラー&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Texture Sample&lt;/code&gt;ノードの&lt;code&gt;A&lt;/code&gt; -&amp;gt; メインマテリアルの&lt;code&gt;オパシティ&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それぞれに接続する。&lt;br&gt;
&lt;img alt="雨のマテリアル完成系" src="images/2020_01_25_06.png" title="雨マテリアルの完成系"&gt;&lt;br&gt;
&lt;img alt="雨のマテリアルの結果" src="images/2020_01_25_07.png" title="雨マテリアルの結果"&gt;  &lt;/p&gt;
&lt;h3&gt;波紋マテリアルを作成&lt;/h3&gt;
&lt;p&gt;波紋のテクスチャを用意。&lt;br&gt;
テクスチャ名は、とりあえず&lt;code&gt;T_Repple&lt;/code&gt;という名前にした。&lt;br&gt;
&lt;img alt="波紋のテクスチャ" src="images/2020_01_25_08.png" title="波紋のテクスチャ"&gt;  &lt;/p&gt;
&lt;p&gt;波紋のマテリアルを作成する。&lt;br&gt;
マテリアルの名前は、&lt;code&gt;M_Repple&lt;/code&gt;にした。&lt;br&gt;
エミッシブルカラーは&lt;code&gt;Texture Sample&lt;/code&gt;とメインマテリアルをそのまま繋ぐが、オパシティは &lt;code&gt;Texture Sample&lt;/code&gt; と &lt;code&gt;Particle Color&lt;/code&gt; を合わせて使用する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Texture Sample&lt;/code&gt;ノードの&lt;code&gt;Texture&lt;/code&gt;の項目は、&lt;code&gt;T_Repple&lt;/code&gt;を設定  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;オパシティ&lt;/code&gt;をパーティクル側で調整出来るようにする。&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Particle Color&lt;/code&gt;を追加  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Multiply&lt;/code&gt;を追加  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Texture Sample&lt;/code&gt;の&lt;code&gt;A&lt;/code&gt;と&lt;code&gt;Particle Color&lt;/code&gt;の白を&lt;code&gt;Multiple&lt;/code&gt;の&lt;code&gt;A&lt;/code&gt;と&lt;code&gt;B&lt;/code&gt;に繋げる。&lt;br&gt;
２つは&lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;どちらにつないでも問題ない。  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Multiply&lt;/code&gt;の出力をメインの&lt;code&gt;オパシティ&lt;/code&gt;に繋げる。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下がその完成系。&lt;br&gt;
&lt;img alt="波紋のマテリアル完成系" src="images/2020_01_25_09.png" title="波紋マテリアルの完成系"&gt;&lt;br&gt;
&lt;img alt="波紋のマテリアルの結果" src="images/2020_01_25_10.png" title="波紋マテリアルの結果"&gt;  &lt;/p&gt;
&lt;h3&gt;雨を降らせる&lt;/h3&gt;
&lt;p&gt;雨と波紋それぞれのマテリアルを用意できたので、実際に雨を降らせる。  &lt;/p&gt;
&lt;p&gt;まず、パーティクルを作成する。&lt;br&gt;
パーティクルの名前は、&lt;code&gt;Rain_System&lt;/code&gt;という名前を付けた。&lt;br&gt;
作成した&lt;code&gt;Rain_System&lt;/code&gt;を開くと次のような画面がでてくる。&lt;br&gt;
&lt;img alt="作成したパーティクルの画面" src="images/2020_01_25_11.png" title="作成したパーティクルの画面"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Required&lt;/code&gt;や&lt;code&gt;Spawn&lt;/code&gt;というモジュールがあるが、初期のモジュールでは必要なものが無かったり、使わないモジュールがあったりしており、またそれぞれのモジュールの設定などもあるので、なるべく簡潔に説明する。&lt;/p&gt;
&lt;p&gt;まず、使ったモジュールは以下である。&lt;br&gt;
&lt;img alt="Rain_Emitterの必要なモジュール" src="images/2020_01_25_12.png" title="Rain_Emitterの必要なモジュール"&gt;  &lt;/p&gt;
&lt;p&gt;番号順に説明する。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ここでは、エミッタの名前を変更する。&lt;br&gt;
&lt;code&gt;Rain Emitter&lt;/code&gt;という名前にする。&lt;br&gt;
&lt;img alt="エミッタの名前を変更" src="images/2020_01_25_13.png" title="エミッタの名前を変更"&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Required&lt;/code&gt;モジュール。&lt;br&gt;
マテリアルを設定する。&lt;code&gt;M_Rain&lt;/code&gt;を設定。&lt;br&gt;
&lt;img alt="マテリアルを変更" src="images/2020_01_25_14.png" title="マテリアルを変更"&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Spawn&lt;/code&gt;モジュール。&lt;br&gt;
発生させるパーティクルの数を設定する。数は、&lt;code&gt;5000&lt;/code&gt;にする。&lt;br&gt;
&lt;img alt="Constantの値を設定" src="images/2020_01_25_15.png" title="Constantの値を設定"&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Event Generator&lt;/code&gt;モジュール。&lt;br&gt;
パーティクル衝突時に、イベントを生成するようにする。&lt;br&gt;
このモジュールは、この後説明する&lt;code&gt;波紋を表示&lt;/code&gt;のために必要になってくる。  &lt;ul&gt;
&lt;li&gt;最初に&lt;code&gt;+&lt;/code&gt;ボタンでイベントを1つ追加する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Type&lt;/code&gt;を&lt;code&gt;コリジョン&lt;/code&gt;に設定する。
イベントの発生条件を床と雨が衝突したときにイベントを発生させるため。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CustomName&lt;/code&gt;を&lt;code&gt;onKilledRain&lt;/code&gt;と入力。&lt;br&gt;
通知するイベント名は、まぁ雨がkillした後のイベントということで。&lt;br&gt;
&lt;img alt="Constantの値を設定" src="images/2020_01_25_16.png" title="Constantの値を設定"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Lifetime&lt;/code&gt;モジュール。&lt;br&gt;
雨のライフタイムを設定。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;min&lt;/code&gt;は&lt;code&gt;0.0&lt;/code&gt;を設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max&lt;/code&gt;は&lt;code&gt;0.3&lt;/code&gt;を設定&lt;br&gt;
&lt;img alt="Lifetimeの設定" src="images/2020_01_25_17.png" title="Lifetimeの設定"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Initial Size&lt;/code&gt;モジュール。&lt;br&gt;
特に何もしない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Initial Location&lt;/code&gt;モジュール。&lt;br&gt;
雨を降らせる範囲を設定。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Distribution&lt;/code&gt;は&lt;code&gt;Distribution Vector Uniform&lt;/code&gt;にする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max&lt;/code&gt;は、x=&lt;code&gt;500&lt;/code&gt;, y=&lt;code&gt;500&lt;/code&gt;, z=&lt;code&gt;500&lt;/code&gt;を設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min&lt;/code&gt;は、x=&lt;code&gt;-500&lt;/code&gt;, y=&lt;code&gt;-500&lt;/code&gt;, z=&lt;code&gt;-0.1&lt;/code&gt;を設定&lt;br&gt;
&lt;img alt="パーティクルの範囲設定" src="images/2020_01_25_18.png" title="パーティクルの範囲設定"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Const Acceleration&lt;/code&gt;モジュール。&lt;br&gt;
雨が降る速度を変更。&lt;br&gt;
パーティクルを下に移動させるため、マイナスの数字を入力する。&lt;code&gt;z&lt;/code&gt;に&lt;code&gt;-5000&lt;/code&gt;を入力。&lt;br&gt;
&lt;img alt="雨の降るスピードを設定" src="images/2020_01_25_19.png" title="雨の降るスピードを設定"&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Actor Collision&lt;/code&gt;モジュール。&lt;br&gt;
これは特になにもしない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Lock Axis&lt;/code&gt;モジュール。これを設定しないと、カメラの向きを変えたときなど雨の降り方がおかしなことになる。&lt;br&gt;
&lt;code&gt;Lock Axis Flags&lt;/code&gt;の設定を&lt;code&gt;Rotate Z&lt;/code&gt;を指定する。&lt;br&gt;
&lt;img alt="回転を抑制" src="images/2020_01_25_20.png" title="回転を抑制"&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ここで、一旦設定したパーティクル&lt;code&gt;Rain_System&lt;/code&gt;をビューポートに設置する。 &lt;br&gt;
&lt;code&gt;Rain_System&lt;/code&gt;の位置は、xyzともに &lt;code&gt;0&lt;/code&gt; にした。次の図のように雨が降ってくるようになった。&lt;br&gt;
&lt;img alt="ビューポートに設置" src="images/2020_01_25_21.png" title="ビューポートに設置"&gt;&lt;/p&gt;
&lt;h3&gt;波紋を表示&lt;/h3&gt;
&lt;p&gt;波紋の表示のタイミングは、雨が降る -&amp;gt; 床に当たる -&amp;gt; 波紋を表示、というふうにしたい。&lt;br&gt;
エミッタは左から右に実行されるので、&lt;code&gt;Rain Emitter&lt;/code&gt;の右側に波紋用のエミッタを作成する。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="波紋用のエミッタを作成" src="images/2020_01_25_22.png" title="波紋用のエミッタを作成"&gt;&lt;/p&gt;
&lt;p&gt;波紋を表示させるために、使ったモジュールは以下である。&lt;br&gt;
&lt;img alt="必要なモジュール" src="images/2020_01_25_23.png" title="必要なモジュール"&gt;  &lt;/p&gt;
&lt;p&gt;番号順に説明する。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Required&lt;/code&gt;モジュール。&lt;br&gt;
ここでは、マテリアルを&lt;code&gt;M_Repple&lt;/code&gt;に変更する。&lt;br&gt;
&lt;img alt="マテリアルを変更" src="images/2020_01_25_24.png" title="マテリアルを変更"&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Spawn&lt;/code&gt;モジュール。&lt;br&gt;
このモジュールで、波紋をスポーンしない。なので、数は&lt;code&gt;0&lt;/code&gt;にする。&lt;br&gt;
&lt;img alt="Constantの値を設定" src="images/2020_01_25_25.png" title="Constantの値を設定"&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EventReceiver Spawn&lt;/code&gt;モジュール。&lt;br&gt;
雨の&lt;code&gt;Event Generator&lt;/code&gt;モジュールが発行したイベントを受け取り、パーティクルをスポーンする。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Constant&lt;/code&gt;に１を設定。&lt;br&gt;
なぜ1かというと、雨1粒につき波紋を1つだけスポーンさせたいため&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Source&lt;/code&gt;&lt;br&gt;
ここでは、上記の雨で設定した&lt;code&gt;Event Generator&lt;/code&gt;モジュールの値と同じものを入力する。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Event Generator Type&lt;/code&gt;は、&lt;code&gt;コリジョン&lt;/code&gt;を設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Event Name&lt;/code&gt;は、&lt;code&gt;onKilledRain&lt;/code&gt;を入力&lt;br&gt;
&lt;img alt="Constantの値を設定" src="images/2020_01_25_26.png" title="Constantの値を設定"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Lifetime&lt;/code&gt;モジュール&lt;br&gt;
波紋のライフタイムを設定。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;min&lt;/code&gt;は&lt;code&gt;0.0&lt;/code&gt;を設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max&lt;/code&gt;は&lt;code&gt;2.0&lt;/code&gt;を設定&lt;br&gt;
&lt;img alt="Lifetimeの設定" src="images/2020_01_25_27.png" title="Lifetimeの設定"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Initial Location&lt;/code&gt;モジュール&lt;br&gt;
波紋を表示させる位置について、&lt;code&gt;XY&lt;/code&gt;について設定はしない。&lt;br&gt;
ただし、&lt;code&gt;Z&lt;/code&gt;が&lt;code&gt;0&lt;/code&gt;のままでは、床の上部分と座標が被り波紋の線がはっきりとしない。&lt;br&gt;
波紋を表示させる高さを変える。一応床より少し上にする。  &lt;br&gt;
&lt;code&gt;Max&lt;/code&gt;と&lt;code&gt;Min&lt;/code&gt;の&lt;code&gt;Z&lt;/code&gt;に&lt;code&gt;0.01&lt;/code&gt;を入力。&lt;br&gt;
&lt;img alt="高さの設定" src="images/2020_01_25_28.png" title="高さの設定"&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Initial Size&lt;/code&gt;モジュール&lt;br&gt;
特に何もしない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Color Over Life&lt;/code&gt;モジュール&lt;br&gt;
徐々に波紋が消えるように色を設定する。&lt;br&gt;
基本、追加時の初期設定で徐々に消えるようになっているので、特に何もしない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Size By Life&lt;/code&gt;モジュール。&lt;br&gt;
波紋が徐々に広がるようにするために使用。&lt;br&gt;
&lt;code&gt;Points&lt;/code&gt; -&amp;gt; &lt;code&gt;0&lt;/code&gt; -&amp;gt; &lt;code&gt;Out Val&lt;/code&gt; の&lt;code&gt;X&lt;/code&gt;, &lt;code&gt;Y&lt;/code&gt;, &lt;code&gt;Z&lt;/code&gt;に&lt;code&gt;0&lt;/code&gt;を入力。  &lt;br&gt;
&lt;img alt="Size By Lifeの設定" src="images/2020_01_25_29.png" title="Size By Lifeの設定"&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Lock Axis&lt;/code&gt;モジュール&lt;br&gt;
これを設定しないと、波紋が縦に表示される。&lt;br&gt;
なので、&lt;code&gt;Lock Axis Flags&lt;/code&gt;を&lt;code&gt;Z&lt;/code&gt;にする。&lt;br&gt;
&lt;img alt="Lock Axis Flagsの設定" src="images/2020_01_25_30.png" title="SLock Axis Flagsの設定"&gt;  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;すべての設定は完了したので、ビューポートで確認。&lt;br&gt;
&lt;img alt="ビューポート確認" src="images/2020_01_25_31.png" title="ビューポート確認"&gt;  &lt;/p&gt;</content><category term="3D"></category><category term="Unreal"></category><category term="作り方"></category></entry><entry><title>AndroidのTextViewを右寄せにする方法</title><link href="https://hachimoto12.com/android_textview_right_justfit.html" rel="alternate"></link><published>2019-11-05T00:00:00+09:00</published><updated>2019-11-05T00:00:00+09:00</updated><author><name>鉢本 一二</name></author><id>tag:hachimoto12.com,2019-11-05:/android_textview_right_justfit.html</id><content type="html">&lt;p&gt;AndroidでTextViewを右寄せにする方法をメモ。&lt;/p&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Android Studio : 3.5.2&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;方法&lt;/h2&gt;
&lt;p&gt;まず、Aundroid Studio上でTextViewを図のように配置してみた。&lt;/p&gt;
&lt;p&gt;&lt;img alt="初期設定" src="images/2019_11_05_01.png" title="初期設定"&gt;&lt;/p&gt;
&lt;p&gt;この状態でビルドし、実行。&lt;br&gt;
次のように、左寄せに表示される。&lt;/p&gt;
&lt;p&gt;&lt;img alt="実行1" src="images/2019_11_05_02.png" title="実行1"&gt;&lt;/p&gt;
&lt;p&gt;Android Studioに戻り、gravityという項目を検索。&lt;/p&gt;
&lt;p&gt;&lt;img alt="gravityの項目検索" src="images/2019_11_05_03.png" title="gravityの項目検索"&gt;  &lt;/p&gt;
&lt;p&gt;grivityの右にある旗をクリック。&lt;/p&gt;
&lt;p&gt;&lt;img alt="gravityの右にある旗ををクリック" src="images/2019_11_05_04.png" title="gravityの右にある旗ををクリック"&gt;  &lt;/p&gt;
&lt;p&gt;チェックボックスのリストが表示される。&lt;br&gt;
いろいろあるが、今回右寄せにしたいので、&lt;strong&gt;right&lt;/strong&gt;にチェックをつける。&lt;/p&gt;
&lt;p&gt;&lt;img alt="rightにチェック" src="images/2019_11_05_05.png" title="rightにチェック"&gt;  &lt;/p&gt;
&lt;p&gt;gravityのrightにチェックを入れた状態で、ビルドする。&lt;/p&gt;
&lt;p&gt;&lt;img alt="rightにチェックした状態でビルド" src="images/2019_11_05_06.png" title="rightにチェックした状態でビルド"&gt;  &lt;/p&gt;
&lt;p&gt;ビルドが成功したら、実行する。&lt;br&gt;
右寄せで表示された。&lt;/p&gt;
&lt;p&gt;&lt;img alt="実行2" src="images/2019_11_05_07.png" title="実行2"&gt;  &lt;/p&gt;</content><category term="プログラミング"></category><category term="Android"></category></entry><entry><title>Rustのインストール方法 Linuxの場合</title><link href="https://hachimoto12.com/rust_install.html" rel="alternate"></link><published>2019-11-01T00:00:00+09:00</published><updated>2019-11-01T00:00:00+09:00</updated><author><name>鉢本 一二</name></author><id>tag:hachimoto12.com,2019-11-01:/rust_install.html</id><summary type="html">&lt;p&gt;Rustのインストール方法をメモ。&lt;br&gt;
今回インストールされたRustのバージョンは、&lt;strong&gt;rustc 1.38.0 (625451e37 2019-09-23)&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;まず、コマンドを実行。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl https://sh.rustup.rs -sSf &lt;span class="p"&gt;|&lt;/span&gt; sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;コマンドを実行すると、インストールが始まる。&lt;br&gt;
インストールの方法を入力する必要がある。とりあえず、１を選択。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;info: downloading installer

Welcome to Rust!

This will download and install the official compiler for the Rust
programming language, and its package manager, Cargo.

It will add the …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Rustのインストール方法をメモ。&lt;br&gt;
今回インストールされたRustのバージョンは、&lt;strong&gt;rustc 1.38.0 (625451e37 2019-09-23)&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;まず、コマンドを実行。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl https://sh.rustup.rs -sSf &lt;span class="p"&gt;|&lt;/span&gt; sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;コマンドを実行すると、インストールが始まる。&lt;br&gt;
インストールの方法を入力する必要がある。とりあえず、１を選択。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;info: downloading installer

Welcome to Rust!

This will download and install the official compiler for the Rust
programming language, and its package manager, Cargo.

It will add the cargo, rustc, rustup and other commands to
Cargo&amp;#39;s bin directory, located at:

  /home/local/.cargo/bin

This can be modified with the CARGO_HOME environment variable.

Rustup metadata and toolchains will be installed into the Rustup
home directory, located at:

  /home/local/.rustup

This can be modified with the RUSTUP_HOME environment variable.

This path will then be added to your PATH environment variable by
modifying the profile file located at:

  /home/local/.profile

You can uninstall at any time with rustup self uninstall and
these changes will be reverted.

Current installation options:


   default host triple: x86_64-unknown-linux-gnu
     default toolchain: stable
               profile: default
  modify PATH variable: yes

1) Proceed with installation (default)
2) Customize installation
3) Cancel installation
&amp;gt;1　&amp;lt;--- ここで入力が発生。

info: profile set to &amp;#39;default&amp;#39;
info: syncing channel updates for &amp;#39;stable-x86_64-unknown-linux-gnu&amp;#39;
info: latest update on 2019-09-26, rust version 1.38.0 (625451e37 2019-09-23)
info: downloading component &amp;#39;cargo&amp;#39;
  4.7 MiB /   4.7 MiB (100 %)   4.2 MiB/s in  1s ETA:  0s
info: downloading component &amp;#39;clippy&amp;#39;
info: downloading component &amp;#39;rust-docs&amp;#39;
 11.7 MiB /  11.7 MiB (100 %)   5.2 MiB/s in  2s ETA:  0s
info: downloading component &amp;#39;rust-std&amp;#39;
173.3 MiB / 173.3 MiB (100 %)   4.0 MiB/s in 42s ETA:  0s
info: downloading component &amp;#39;rustc&amp;#39;
 66.1 MiB /  66.1 MiB (100 %)   4.7 MiB/s in 14s ETA:  0s
info: downloading component &amp;#39;rustfmt&amp;#39;
info: installing component &amp;#39;cargo&amp;#39;
info: installing component &amp;#39;clippy&amp;#39;
info: installing component &amp;#39;rust-docs&amp;#39;
 11.7 MiB /  11.7 MiB (100 %) 745.6 KiB/s in  9s ETA:  0s
info: installing component &amp;#39;rust-std&amp;#39;
173.3 MiB / 173.3 MiB (100 %)  22.8 MiB/s in  8s ETA:  0s
info: installing component &amp;#39;rustc&amp;#39;
 66.1 MiB /  66.1 MiB (100 %)  12.2 MiB/s in  5s ETA:  0s
info: installing component &amp;#39;rustfmt&amp;#39;
info: default toolchain set to &amp;#39;stable&amp;#39;

  stable installed - rustc 1.38.0 (625451e37 2019-09-23)


Rust is installed now. Great!

To get started you need Cargo&amp;#39;s bin directory ($HOME/.cargo/bin) in your PATH
environment variable. Next time you log in this will be done
automatically.

To configure your current shell run source $HOME/.cargo/env
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;インストールの最後の出力にもあるが、Rustは$HOME/.cargoにインストールされている。&lt;br&gt;
$HOME/.cargo/envの内容が、Rustのパスを設定がされている内容となっている。&lt;br&gt;
envファイルを使ってを起動時にRustを実行できるようにするため、$HOME/.bashrcを編集する。&lt;br&gt;
.bashrcを開き、一番下の行に次の文を追加。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source $HOME/.cargo/env
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;.bashrcを読み込む。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.bashrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;パスがちゃんと設定されているか確認のため、以下のコマンドを実行。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rustc --version
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;次のようにバージョン情報が出力されれば、OK。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rustc &lt;span class="m"&gt;1&lt;/span&gt;.38.0 &lt;span class="o"&gt;(&lt;/span&gt;625451e37 &lt;span class="m"&gt;2019&lt;/span&gt;-09-23&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="プログラミング"></category><category term="Rust"></category></entry><entry><title>Visual StudioでqDebugのログを表示させる方法</title><link href="https://hachimoto12.com/qDebug_in_VS.html" rel="alternate"></link><published>2019-09-20T00:00:00+09:00</published><updated>2019-09-20T00:00:00+09:00</updated><author><name>鉢本 一二</name></author><id>tag:hachimoto12.com,2019-09-20:/qDebug_in_VS.html</id><content type="html">&lt;h2&gt;問題&lt;/h2&gt;
&lt;p&gt;Visual Studioを使ってQt5 GUIアプリケーションを作成しているときに、qDebugでログを表示させたかった。
しかし実行時、Visual Studioの出力ウィンドウでログがでず、ほかに出力ウィンドウに出力されていなかった。&lt;/p&gt;
&lt;h2&gt;対策&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/11184590/how-to-view-qdebug-in-visual-studio/21277910" target="_blank"&gt;ここ&lt;/a&gt;で解決策が見つかった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プロジェクトのプロパティ -&amp;gt; リンカ -&amp;gt; システム -&amp;gt; サブシステムでコンソールを選択。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実行するとコンソールが出てqDebugのログも出力されていた。&lt;/p&gt;</content><category term="プログラミング"></category><category term="Qt5"></category><category term="VisualStudio"></category></entry><entry><title>Visual Studio 2017 + FBX SDKでビルドしようとしたらエラーになったときの対処</title><link href="https://hachimoto12.com/fbx_build_error.html" rel="alternate"></link><published>2019-08-16T00:00:00+09:00</published><updated>2019-08-16T00:00:00+09:00</updated><author><name>鉢本 一二</name></author><id>tag:hachimoto12.com,2019-08-16:/fbx_build_error.html</id><summary type="html">&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio 2017&lt;/li&gt;
&lt;li&gt;FBX SDK 2019.5&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;問題&lt;/h2&gt;
&lt;p&gt;FBX SDKを使ってみようと思い、Visual Studio 2017でソースコードをビルド。
その時の設定として、以下の設定を行った。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プロパティ -&amp;gt; C/C++ -&amp;gt; 言語 -&amp;gt; 準拠モードを「いいえ」に設定&lt;/li&gt;
&lt;li&gt;プロパティ -&amp;gt; C/C++ -&amp;gt; 全般 -&amp;gt; 追加のインクルードディレクトリでFBX SDKのインクルードパスを追加&lt;/li&gt;
&lt;li&gt;プロパティ -&amp;gt; リンカ -&amp;gt; 全般 -&amp;gt; 追加のライブラリディレクトリでdebug, releaseそれぞれに合わせてライブラリパスを追加&lt;/li&gt;
&lt;li&gt;プロパティ -&amp;gt; リンカ -&amp;gt; 入力でfbxsdk-md.libを追加
プロパティ -&amp;gt; C/C++ -&amp;gt; コード生成 -&amp;gt; ランタイム　ライブラリで&lt;ul&gt;
&lt;li&gt;debug   : マルチスレッド デバック DLL&lt;/li&gt;
&lt;li&gt;release : マルチスレッド …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio 2017&lt;/li&gt;
&lt;li&gt;FBX SDK 2019.5&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;問題&lt;/h2&gt;
&lt;p&gt;FBX SDKを使ってみようと思い、Visual Studio 2017でソースコードをビルド。
その時の設定として、以下の設定を行った。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プロパティ -&amp;gt; C/C++ -&amp;gt; 言語 -&amp;gt; 準拠モードを「いいえ」に設定&lt;/li&gt;
&lt;li&gt;プロパティ -&amp;gt; C/C++ -&amp;gt; 全般 -&amp;gt; 追加のインクルードディレクトリでFBX SDKのインクルードパスを追加&lt;/li&gt;
&lt;li&gt;プロパティ -&amp;gt; リンカ -&amp;gt; 全般 -&amp;gt; 追加のライブラリディレクトリでdebug, releaseそれぞれに合わせてライブラリパスを追加&lt;/li&gt;
&lt;li&gt;プロパティ -&amp;gt; リンカ -&amp;gt; 入力でfbxsdk-md.libを追加
プロパティ -&amp;gt; C/C++ -&amp;gt; コード生成 -&amp;gt; ランタイム　ライブラリで&lt;ul&gt;
&lt;li&gt;debug   : マルチスレッド デバック DLL&lt;/li&gt;
&lt;li&gt;release : マルチスレッド DLL
となっていたので mdがついているライブラリを追加。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ビルドを行うと以下のようなエラーが出た。
&lt;img alt="ビルドエラー" src="images/2019_08_16_01.png" title="ビルドエラー"&gt;&lt;/p&gt;
&lt;h2&gt;原因&lt;/h2&gt;
&lt;p&gt;ライブラリが足りていなかったのが原因。&lt;/p&gt;
&lt;h2&gt;対策&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;その1. 主に、fbxsdk-md.libと一緒にある以下2つのライブラリを追加することで解決できた。&lt;ul&gt;
&lt;li&gt;libxml2-md.lib&lt;/li&gt;
&lt;li&gt;zlib-md.lib&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その2. fbxsdk.libをリンクしてビルドする。
  ただしfbxsdk.libをリンクした場合、実行時にexeファイルと同じところにfbxsdk.dllを置かない動かないと実行されない。
  *-md.libをリンクして実行した場合は、dllなしでもexeファイルを実行できた。&lt;/li&gt;
&lt;/ul&gt;</content><category term="プログラミング"></category><category term="c++"></category></entry><entry><title>ESP32 Developerの書き込み失敗について</title><link href="https://hachimoto12.com/about_writting_fauilure_of_esp32.html" rel="alternate"></link><published>2019-07-13T00:00:00+09:00</published><updated>2019-07-13T00:00:00+09:00</updated><author><name>鉢本 一二</name></author><id>tag:hachimoto12.com,2019-07-13:/about_writting_fauilure_of_esp32.html</id><summary type="html">&lt;p&gt;マイコン初めて数か月の初心者のメモ。&lt;/p&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows 10&lt;/li&gt;
&lt;li&gt;スイッチサイエンス ESP Develper32&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;問題&lt;/h2&gt;
&lt;p&gt;スケッチを書き込もうとしたら失敗。
失敗したときのログ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[Starting] Upload sketch - 01\01.ino
[Warning] Output path is not specified. Unable to reuse previously compiled files. Upload could be slow. See README.
構成をロード中…
パッケージを初期化中…
ボードを準備中…
検証中…
最大1310720バイトのフラッシュメモリのうち、スケッチが255788バイト（19%）を使っています。
最大327680バイトのRAMのうち、グローバル変数が13932バイト（4%）を使っていて、ローカル変数で313748バイト使うことができます。
マイコンボードに書き込んでいます...
esptool.py …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;マイコン初めて数か月の初心者のメモ。&lt;/p&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows 10&lt;/li&gt;
&lt;li&gt;スイッチサイエンス ESP Develper32&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;問題&lt;/h2&gt;
&lt;p&gt;スケッチを書き込もうとしたら失敗。
失敗したときのログ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[Starting] Upload sketch - 01\01.ino
[Warning] Output path is not specified. Unable to reuse previously compiled files. Upload could be slow. See README.
構成をロード中…
パッケージを初期化中…
ボードを準備中…
検証中…
最大1310720バイトのフラッシュメモリのうち、スケッチが255788バイト（19%）を使っています。
最大327680バイトのRAMのうち、グローバル変数が13932バイト（4%）を使っていて、ローカル変数で313748バイト使うことができます。
マイコンボードに書き込んでいます...
esptool.py v2.6
Serial port COM4
Connecting........_____....._____....._____....._____....._____....._____....._____

A fatal error occurred: Failed to connect to ESP32: Timed out waiting for packet header
スケッチの書き込み中にエラーが発生しました
[Error] Exit with code=1
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;原因&lt;/h2&gt;
&lt;p&gt;書き込むときにRESETボタンを押していなかった。&lt;/p&gt;
&lt;h2&gt;対策&lt;/h2&gt;
&lt;p&gt;Connectingが表示されたらRESETボタンを押しっぱなしにする。
Writtingが始まったら離す。
最後に&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Leaving...
Hard resetting via RTS pin...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;が出力されたら書き込み成功。&lt;/p&gt;</content><category term="マイコン"></category><category term="マイコン"></category><category term="ESP32"></category></entry><entry><title>AMD APP SDKが無いので、代わりにOpenCL Install Client Driver(ICD) LoaderでOpenCLを使ってみる</title><link href="https://hachimoto12.com/opencl_with_icd.html" rel="alternate"></link><published>2019-07-07T00:00:00+09:00</published><updated>2019-07-07T00:00:00+09:00</updated><author><name>鉢本 一二</name></author><id>tag:hachimoto12.com,2019-07-07:/opencl_with_icd.html</id><content type="html">&lt;p&gt;&lt;a href="https://developer.amd.com/amd-accelerated-parallel-processing-app-sdk/"&gt;AMD APP SDK&lt;/a&gt;が404のため。&lt;/p&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows 10&lt;/li&gt;
&lt;li&gt;Radeon RX 560.&lt;/li&gt;
&lt;li&gt;Visual Studio 2017 Communityインストール済み。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;やり方&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;AMDのドライバーを最新にしておく。&lt;/li&gt;
&lt;li&gt;c:/windowsにあるOpenCL.dllが新しいことを確認。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/KhronosGroup/OpenCL-ICD-Loader"&gt;OpenCL-ICD-Loader&lt;/a&gt;からプロジェクトをダウンロード。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/KhronosGroup/OpenCL-Headers"&gt;OpenCL Header&lt;/a&gt;からヘッダーの最新版をダウンロード&lt;/li&gt;
&lt;li&gt;3と4.を解凍。&lt;/li&gt;
&lt;li&gt;OpenCL HeaderのCLフォルダをOpenCL-ICD-Loaderのincフォルダへコピー。&lt;/li&gt;
&lt;li&gt;OpenCL-ICD-Loaderのスクリプトを実行。&lt;/li&gt;
&lt;li&gt;OpenCLのプログラムを書く。&lt;/li&gt;
&lt;li&gt;ビルドの設定で、ライブラリをOpenCL-ICD-Loaderのbuild/OpenCL.libを指定する。&lt;/li&gt;
&lt;li&gt;ビルド&lt;/li&gt;
&lt;/ol&gt;</content><category term="プログラミング"></category><category term="OpenCL"></category><category term="c++"></category></entry></feed>